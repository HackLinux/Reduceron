interface Perms3 where {
infixr  9 `append3`;

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Fractional (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Num (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.RealFrac (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Real (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Enum (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Ord (Data.Ratio.Ratio a);

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Eq (Data.Ratio.Ratio a);

{-# NEED #-}
instance Prelude @ Ix.Ix ();

{-# NEED #-}
instance Ix @ Ix.Ix Prelude.Char;

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b) => Ix.Ix (a,b);

{-# NEED #-}
instance Prelude @ Ix.Ix Prelude.Ordering;

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c) => Ix.Ix (a,b,c);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j,Ix.Ix k,Ix.Ix l,Ix.Ix m,Ix.Ix n,Ix.Ix o) => Ix.Ix (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j,Ix.Ix k,Ix.Ix l,Ix.Ix m,Ix.Ix n) => Ix.Ix (a,b,c,d,e,f,g,h,i,j,k,l,m,n);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j,Ix.Ix k,Ix.Ix l,Ix.Ix m) => Ix.Ix (a,b,c,d,e,f,g,h,i,j,k,l,m);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j,Ix.Ix k,Ix.Ix l) => Ix.Ix (a,b,c,d,e,f,g,h,i,j,k,l);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j,Ix.Ix k) => Ix.Ix (a,b,c,d,e,f,g,h,i,j,k);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i,Ix.Ix j) => Ix.Ix (a,b,c,d,e,f,g,h,i,j);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h,Ix.Ix i) => Ix.Ix (a,b,c,d,e,f,g,h,i);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g,Ix.Ix h) => Ix.Ix (a,b,c,d,e,f,g,h);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f,Ix.Ix g) => Ix.Ix (a,b,c,d,e,f,g);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e,Ix.Ix f) => Ix.Ix (a,b,c,d,e,f);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d,Ix.Ix e) => Ix.Ix (a,b,c,d,e);

{-# NEED #-}
instance Ix @ (Ix.Ix a,Ix.Ix b,Ix.Ix c,Ix.Ix d) => Ix.Ix (a,b,c,d);

{-# NEED #-}
instance Ix @ Ix.Ix Prelude.Int;

{-# NEED #-}
instance Ix @ Ix.Ix Prelude.Integer;

{-# NEED #-}
instance Ix @ Ix.Ix Prelude.Bool;

{-# NEED #-}
instance Prelude @ Prelude.Functor YHC.Internal.IO;

{-# NEED #-}
instance Prelude @ Prelude.Monad YHC.Internal.IO;

{-# NEED #-}
instance Data.Ratio @ (Prelude.Integral a) => Prelude.Show (Data.Ratio.Ratio a);

{-# NEED #-}
instance Prelude @ (Prelude.Show a) => Prelude.Show (YHC.Internal.IO a);
interface Ix
{-# NEED Ix #-}
class Ix a;
interface Data.Ratio
{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
interface YHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;
interface YHC.Primitive
{-# NEED _E #-}
data _E a;
interface YHC.Internal
{-# NEED World #-}
data World;
interface ! Perms3
{-# NEED main #-}
main{-# 0 #-}::Prelude.Int;

{-# NEED perms1 #-}
perms1{-# 1 #-}::((List a) -> (List (List a)));

{-# NEED perms3 #-}
perms3{-# 1 #-}::((List a) -> (List (List a)));

{-# NEED combs3 #-}
combs3{-# 4 #-}::(a -> (a -> (a -> ((List a) -> (List (List a))))));

{-# NEED place3 #-}
place3{-# 4 #-}::(a -> (a -> (a -> ((List a) -> (List (List a))))));

{-# NEED place1 #-}
place1{-# 2 #-}::(a -> ((List a) -> (List (List a))));

{-# NEED append3 #-}
append3{-# 2 #-}::((List a) -> ((List a) -> (List a)));

{-# NEED concat3 #-}
concat3{-# 1 #-}::((List (List a)) -> (List a));

{-# NEED sum3 #-}
sum3{-# 1 #-}::((List Prelude.Int) -> Prelude.Int);

{-# NEED map3 #-}
map3{-# 2 #-}::((a -> b) -> ((List a) -> (List b)));

{-# NEED {List Nil Cons Cons2 Cons3} #-}
data List a
  = Nil 
  | Cons a (List a)
  | Cons2 a a (List a)
  | Cons3 a a a (List a);
}
